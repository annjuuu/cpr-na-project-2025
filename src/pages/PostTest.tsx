import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Progress } from "@/components/ui/progress";
import { Award, ClipboardList, ArrowRight, Trophy } from "lucide-react";
import Navbar from "@/components/Navbar";

const PostTest = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [answers, setAnswers] = useState<Record<number, string>>({});
  const [showResults, setShowResults] = useState(false);

  const questions = [
    {
      question: "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô D-R-C-A-B ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠?",
      options: [
        "Danger, Response, Circulation, Airway, Breathing",
        "Danger, Response, Airway, Circulation, Breathing", 
        "Response, Danger, Circulation, Airway, Breathing",
        "Danger, Circulation, Response, Airway, Breathing"
      ],
      correct: 0
    },
    {
      question: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏û‡∏à‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÇ‡∏ó‡∏£ 1669 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ?",
      options: [
        "‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û‡∏°‡∏≤‡∏ñ‡∏∂‡∏á",
        "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å (Chest Compression) ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
        "‡∏´‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á AED ‡∏Å‡πà‡∏≠‡∏ô",
        "‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏Å‡πà‡∏≠‡∏ô"
      ],
      correct: 1
    },
    {
      question: "‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AED ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∑‡∏≠?",
      options: [
        "‡πÄ‡∏õ‡∏¥‡∏î - ‡πÅ‡∏õ‡∏∞ - ‡∏õ‡∏∏‡πà‡∏° - ‡∏õ‡∏±‡πä‡∏°",
        "‡πÅ‡∏õ‡∏∞ - ‡πÄ‡∏õ‡∏¥‡∏î - ‡∏õ‡∏∏‡πà‡∏° - ‡∏õ‡∏±‡πä‡∏°",
        "‡πÄ‡∏õ‡∏¥‡∏î - ‡∏õ‡∏∏‡πà‡∏° - ‡πÅ‡∏õ‡∏∞ - ‡∏õ‡∏±‡πä‡∏°",
        "‡∏õ‡∏±‡πä‡∏° - ‡πÄ‡∏õ‡∏¥‡∏î - ‡πÅ‡∏õ‡∏∞ - ‡∏õ‡∏∏‡πà‡∏°"
      ],
      correct: 0
    },
    {
      question: "‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏¢‡∏∏‡∏ö‡∏•‡∏á‡∏Å‡∏µ‡πà‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£?",
      options: [
        "3-4 ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£",
        "4-5 ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£",
        "5-6 ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£",
        "6-8 ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£"
      ],
      correct: 2
    },
    {
      question: "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ AED ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° Shock ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£?",
      options: [
        "‡∏ö‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ß‡πà‡∏≤ '‡∏â‡∏±‡∏ô‡∏ñ‡∏≠‡∏¢ ‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏≠‡∏¢ ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ñ‡∏≠‡∏¢'",
        "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢",
        "‡∏´‡∏¢‡∏∏‡∏î CPR ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß",
        "‡∏ñ‡∏π‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ç‡πâ‡∏≠"
      ],
      correct: 3
    },
    {
      question: "‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Shock ‡∏î‡πâ‡∏ß‡∏¢ AED ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ?",
      options: [
        "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏µ‡∏û‡∏à‡∏£",
        "‡∏£‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡πá‡∏≠‡∏Å",
        "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏õ‡∏±‡πä‡∏°‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ï‡πà‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ",
        "‡∏õ‡∏¥‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á AED"
      ],
      correct: 2
    },
    {
      question: "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ CPR ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏µ‡πà‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ã‡πâ‡∏≥?",
      options: [
        "3 ‡∏£‡∏≠‡∏ö",
        "5 ‡∏£‡∏≠‡∏ö",
        "7 ‡∏£‡∏≠‡∏ö",
        "10 ‡∏£‡∏≠‡∏ö"
      ],
      correct: 1
    },
    {
      question: "‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ CPR ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡πÉ‡∏î?",
      options: [
        "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏ä‡∏µ‡∏û‡∏à‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏≤‡∏¢‡πÉ‡∏à",
        "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô‡∏°‡∏≤‡∏ñ‡∏∂‡∏á",
        "‡∏ó‡∏≥ CPR ‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ô‡∏≤‡∏ó‡∏µ",
        "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ü‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ"
      ],
      correct: 3
    },
    {
      question: "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏™‡∏á‡∏™‡∏±‡∏¢‡∏Å‡∏£‡∏∞‡∏î‡∏π‡∏Å‡∏Ñ‡∏≠‡∏´‡∏±‡∏Å‡∏Ñ‡∏∑‡∏≠?",
      options: [
        "Head tilt chin lift",
        "Jaw thrust",
        "‡πÉ‡∏™‡πà Oral airway",
        "‡πÉ‡∏™‡πà Nasal airway"
      ],
      correct: 1
    },
    {
      question: "‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÑ‡∏î‡πâ ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
      options: [
        "‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠",
        "‡∏ó‡∏≥ Hand-only CPR (‡∏Å‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)",
        "‡∏£‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏π‡πâ‡∏ä‡∏µ‡∏û",
        "‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏ï‡πà‡∏≠‡πÑ‡∏õ"
      ],
      correct: 1
    }
  ];

  const handleAnswer = (value: string) => {
    setAnswers(prev => ({
      ...prev,
      [currentQuestion]: value
    }));
  };

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      setShowResults(true);
    }
  };

  const calculateScore = () => {
    let correct = 0;
    questions.forEach((q, index) => {
      if (parseInt(answers[index]) === q.correct) {
        correct++;
      }
    });
    return correct;
  };

  const score = calculateScore();
  const percentage = (score / questions.length) * 100;

  const getGradeMessage = () => {
    if (percentage >= 90) return "‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°! ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á";
    if (percentage >= 80) return "‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏µ";
    if (percentage >= 70) return "‡∏î‡∏µ! ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö";
    return "‡∏Ñ‡∏ß‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°";
  };

  if (showResults) {
    return (
      <>
        <Navbar />
        <div className="min-h-screen bg-gradient-to-br from-background to-muted p-4">
          <div className="container mx-auto max-w-2xl">
            <Card className="shadow-lg">
              <CardHeader className="text-center">
                <div className="mx-auto w-16 h-16 bg-gradient-medical rounded-full flex items-center justify-center mb-4">
                  {percentage >= 70 ? (
                    <Trophy className="w-8 h-8 text-white" />
                  ) : (
                    <ClipboardList className="w-8 h-8 text-white" />
                  )}
                </div>
                <CardTitle className="text-2xl">
                  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
                </CardTitle>
              </CardHeader>
              <CardContent className="text-center space-y-6">
                <div className="text-6xl font-bold text-primary">
                  {score}/{questions.length}
                </div>
                <div className="text-xl text-muted-foreground">
                  ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {percentage.toFixed(0)}%
                </div>
                
                <div className={`p-4 rounded-lg ${
                  percentage >= 70 ? 'bg-success/10 border border-success/20' : 'bg-warning/10 border border-warning/20'
                }`}>
                  <p className={`text-lg font-semibold ${percentage >= 70 ? 'text-success' : 'text-warning'}`}>
                    {getGradeMessage()}
                  </p>
                </div>

                {percentage >= 70 && (
                  <div className="bg-gradient-medical/10 p-6 rounded-lg border border-medical/20">
                    <Award className="w-12 h-12 mx-auto mb-4 text-medical" />
                    <h3 className="text-xl font-bold text-medical mb-2">
                      üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢!
                    </h3>
                    <p className="text-medical">
                      ‡∏Ñ‡∏∏‡∏ì‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏ß‡∏¢‡∏ü‡∏∑‡πâ‡∏ô‡∏Ñ‡∏∑‡∏ô‡∏ä‡∏µ‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ AED ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                    </p>
                  </div>
                )}

                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Button 
                    variant="outline"
                    onClick={() => window.location.href = '/articles'}
                  >
                    ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                  </Button>
                  <Button 
                    className="bg-gradient-emergency text-white"
                    onClick={() => window.location.href = '/'}
                  >
                    ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å <ArrowRight className="w-4 h-4 ml-2" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Navbar />
      <div className="min-h-screen bg-gradient-to-br from-background to-muted p-4">
        <div className="container mx-auto max-w-2xl">
          <div className="mb-6">
            <div className="flex items-center justify-between mb-2">
              <h1 className="text-2xl font-bold">‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h1>
              <span className="text-muted-foreground">
                {currentQuestion + 1}/{questions.length}
              </span>
            </div>
            <Progress value={(currentQuestion / questions.length) * 100} className="h-2" />
          </div>

          <Card className="shadow-lg">
            <CardHeader>
              <CardTitle className="text-lg">
                {questions[currentQuestion].question}
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <RadioGroup
                value={answers[currentQuestion] || ""}
                onValueChange={handleAnswer}
                className="space-y-3"
              >
                {questions[currentQuestion].options.map((option, index) => (
                  <div key={index} className="flex items-center space-x-2">
                    <RadioGroupItem value={index.toString()} id={`q${currentQuestion}-${index}`} />
                    <Label 
                      htmlFor={`q${currentQuestion}-${index}`}
                      className="flex-1 cursor-pointer py-2"
                    >
                      {option}
                    </Label>
                  </div>
                ))}
              </RadioGroup>

              <div className="flex justify-end pt-4">
                <Button
                  onClick={nextQuestion}
                  disabled={!answers[currentQuestion]}
                  className="bg-gradient-emergency text-white"
                >
                  {currentQuestion === questions.length - 1 ? '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' : '‡∏ñ‡∏±‡∏î‡πÑ‡∏õ'}
                  <ArrowRight className="w-4 h-4 ml-2" />
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
};

export default PostTest;